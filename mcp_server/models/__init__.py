# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:02:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class FieldDatamodelCodeGeneratorRootSpecialGetResponse(
    RootModel[Optional[Dict[str, Any]]]
):
    root: Optional[Dict[str, Any]] = None


class FieldApiGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class FieldHeartbeatGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class FieldLbheartbeatGetResponse(BaseModel):
    pass


class FieldVersionGetResponse(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class Method(Enum):
    GET = 'GET'
    HEAD = 'HEAD'
    DELETE = 'DELETE'
    TRACE = 'TRACE'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'


class Defaults(BaseModel):
    body: Optional[Dict[str, Any]] = Field(None, title='Body')
    headers: Optional[Dict[str, Any]] = Field(None, title='Headers')
    method: Optional[Method] = Field(None, title='Method')
    path: Optional[constr(pattern=r'^/')] = Field(None, title='Path')


class Request(BaseModel):
    body: Optional[Dict[str, Any]] = Field(None, title='Body')
    headers: Optional[Dict[str, Any]] = Field(None, title='Headers')
    method: Optional[Method] = Field(None, title='Method')
    path: constr(pattern=r'^/') = Field(..., title='Path')


class BatchPostRequest(BaseModel):
    defaults: Optional[Defaults] = Field(None, title='Defaults')
    requests: List[Request] = Field(..., title='Requests')


class Response(BaseModel):
    body: Optional[Dict[str, Any]] = Field(None, title='Body')
    headers: Optional[Dict[str, Any]] = Field(None, title='Headers')
    path: str = Field(..., title='Path')
    status: int = Field(..., title='Status')


class BatchPostResponse(BaseModel):
    responses: List[Response] = Field(..., title='Responses')


class BatchPostResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class Datum(BaseModel):
    collection_schema: Optional[Dict[str, Any]] = Field(None, alias='collection:schema')
    group_schema: Optional[Dict[str, Any]] = Field(None, alias='group:schema')
    record_schema: Optional[Dict[str, Any]] = Field(None, alias='record:schema')


class BucketsGetResponse(BaseModel):
    data: Optional[List[Datum]] = []


class BucketsGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class FieldSort(RootModel[List[str]]):
    root: List[str]


class FieldFields(RootModel[List[str]]):
    root: List[str]


class Datum1(BaseModel):
    bucket: str = Field(..., title='Bucket')
    collection: str = Field(..., title='Collection')
    host: str = Field(..., title='Host')


class BucketsMonitorCollectionsChangesRecordsGetResponse(BaseModel):
    data: Optional[List[Datum1]] = []


class BucketsMonitorCollectionsChangesRecordsGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class Datum2(BaseModel):
    cache_expires: Optional[int] = Field(None, title='Cache Expires')
    schema_: Optional[Dict[str, Any]] = Field(None, alias='schema', title='Schema')


class BucketsBucketIdCollectionsGetResponse(BaseModel):
    data: Optional[List[Datum2]] = []


class BucketsBucketIdCollectionsGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class BucketsBucketIdCollectionsCollectionIdRecordsGetResponse(BaseModel):
    data: Optional[List[Dict[str, Any]]] = []


class BucketsBucketIdCollectionsCollectionIdRecordsGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class Permissions(BaseModel):
    read: Optional[List[str]] = Field(None, title='Read')
    write: Optional[List[str]] = Field(None, title='Write')


class BucketsBucketIdCollectionsCollectionIdRecordsIdGetResponse(BaseModel):
    data: Optional[Dict[str, Any]] = Field(None, title='Data')
    permissions: Optional[Permissions] = Field(None, title='Permissions')


class BucketsBucketIdCollectionsCollectionIdRecordsIdGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class Data(BaseModel):
    cache_expires: Optional[int] = Field(None, title='Cache Expires')
    schema_: Optional[Dict[str, Any]] = Field(None, alias='schema', title='Schema')


class Permissions1(BaseModel):
    read: Optional[List[str]] = Field(None, title='Read')
    record_create: Optional[List[str]] = Field(
        None, alias='record:create', title='Record:Create'
    )
    write: Optional[List[str]] = Field(None, title='Write')


class BucketsBucketIdCollectionsIdGetResponse(BaseModel):
    data: Optional[Data] = Field(None, title='Data')
    permissions: Optional[Permissions1] = Field(None, title='Permissions')


class BucketsBucketIdCollectionsIdGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class Datum3(BaseModel):
    members: Optional[List[str]] = Field([], title='Members')


class BucketsBucketIdGroupsGetResponse(BaseModel):
    data: Optional[List[Datum3]] = []


class BucketsBucketIdGroupsGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class Data1(BaseModel):
    members: Optional[List[str]] = Field([], title='Members')


class Permissions2(BaseModel):
    read: Optional[List[str]] = Field(None, title='Read')
    write: Optional[List[str]] = Field(None, title='Write')


class BucketsBucketIdGroupsIdGetResponse(BaseModel):
    data: Optional[Data1] = Field(None, title='Data')
    permissions: Optional[Permissions2] = Field(None, title='Permissions')


class BucketsBucketIdGroupsIdGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')


class Data2(BaseModel):
    collection_schema: Optional[Dict[str, Any]] = Field(None, alias='collection:schema')
    group_schema: Optional[Dict[str, Any]] = Field(None, alias='group:schema')
    record_schema: Optional[Dict[str, Any]] = Field(None, alias='record:schema')


class Permissions3(BaseModel):
    collection_create: Optional[List[str]] = Field(
        None, alias='collection:create', title='Collection:Create'
    )
    group_create: Optional[List[str]] = Field(
        None, alias='group:create', title='Group:Create'
    )
    read: Optional[List[str]] = Field(None, title='Read')
    write: Optional[List[str]] = Field(None, title='Write')


class BucketsIdGetResponse(BaseModel):
    data: Optional[Data2] = Field(None, title='Data')
    permissions: Optional[Permissions3] = Field(None, title='Permissions')


class BucketsIdGetResponse1(BaseModel):
    code: int = Field(..., title='Code')
    details: Optional[Any] = None
    errno: int = Field(..., title='Errno')
    error: str = Field(..., title='Error')
    info: Optional[str] = Field(None, title='Info')
    message: Optional[str] = Field(None, title='Message')
