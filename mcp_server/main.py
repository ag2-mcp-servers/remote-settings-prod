# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:02:27+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header, Query
from pydantic import conint, constr

from models import (
    BatchPostRequest,
    BatchPostResponse,
    BatchPostResponse1,
    BucketsBucketIdCollectionsCollectionIdRecordsGetResponse,
    BucketsBucketIdCollectionsCollectionIdRecordsGetResponse1,
    BucketsBucketIdCollectionsCollectionIdRecordsIdGetResponse,
    BucketsBucketIdCollectionsCollectionIdRecordsIdGetResponse1,
    BucketsBucketIdCollectionsGetResponse,
    BucketsBucketIdCollectionsGetResponse1,
    BucketsBucketIdCollectionsIdGetResponse,
    BucketsBucketIdCollectionsIdGetResponse1,
    BucketsBucketIdGroupsGetResponse,
    BucketsBucketIdGroupsGetResponse1,
    BucketsBucketIdGroupsIdGetResponse,
    BucketsBucketIdGroupsIdGetResponse1,
    BucketsGetResponse,
    BucketsGetResponse1,
    BucketsIdGetResponse,
    BucketsIdGetResponse1,
    BucketsMonitorCollectionsChangesRecordsGetResponse,
    BucketsMonitorCollectionsChangesRecordsGetResponse1,
    FieldApiGetResponse,
    FieldDatamodelCodeGeneratorRootSpecialGetResponse,
    FieldFields,
    FieldHeartbeatGetResponse,
    FieldLbheartbeatGetResponse,
    FieldSort,
    FieldVersionGetResponse,
)
from models.Contribute import JsonGetResponse

app = MCPProxy(
    title='Remote Settings PROD',
    version='1.22',
    servers=[{'url': 'https://firefox.settings.services.mozilla.com/v1'}],
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#', tags=['system_health_checks']
)
def server_info():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__api__', tags=['system_health_checks'])
def get_openapi_spec():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__heartbeat__', tags=['system_health_checks'])
def __heartbeat__():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__lbheartbeat__', tags=['system_health_checks'])
def __lbheartbeat__():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__version__', tags=['system_health_checks'])
def __version__():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/batch', tags=['batch_request_handling'])
def batch(body: BatchPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/buckets', tags=['data_access'])
def get_buckets(
    field_limit: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_limit'
    ),
    field_sort: Optional[FieldSort] = Query(None, alias='_sort'),
    field_token: Optional[str] = Query(None, alias='_token'),
    field_since: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_since'
    ),
    field_to: Optional[conint(ge=0, le=9223372036854776000)] = Query(None, alias='_to'),
    field_before: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_before'
    ),
    id: Optional[str] = None,
    last_modified: Optional[conint(ge=0, le=9223372036854776000)] = None,
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/buckets/monitor/collections/changes/records', tags=['data_access'])
def get_changess(
    field_limit: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_limit'
    ),
    field_sort: Optional[FieldSort] = Query(None, alias='_sort'),
    field_token: Optional[str] = Query(None, alias='_token'),
    field_since: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_since'
    ),
    field_to: Optional[conint(ge=0, le=9223372036854776000)] = Query(None, alias='_to'),
    field_before: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_before'
    ),
    id: Optional[str] = None,
    last_modified: Optional[conint(ge=0, le=9223372036854776000)] = None,
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/buckets/{bid}/collections/{cid}/changeset',
    tags=['data_access', 'bucket_operations'],
)
def get_collection_changeset(
    field_since: Optional[constr(pattern=r'^"([0-9]+?)"$')] = Query(
        None, alias='_since'
    ),
    field_expected: str = Query(..., alias='_expected'),
    field_limit: Optional[int] = Query(None, alias='_limit'),
    bucket: Optional[str] = None,
    collection: Optional[str] = None,
    bid: str = ...,
    cid: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/buckets/{bucket_id}/collections', tags=['data_access', 'bucket_operations'])
def get_collections(
    field_limit: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_limit'
    ),
    field_sort: Optional[FieldSort] = Query(None, alias='_sort'),
    field_token: Optional[str] = Query(None, alias='_token'),
    field_since: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_since'
    ),
    field_to: Optional[conint(ge=0, le=9223372036854776000)] = Query(None, alias='_to'),
    field_before: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_before'
    ),
    id: Optional[str] = None,
    last_modified: Optional[conint(ge=0, le=9223372036854776000)] = None,
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
    bucket_id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/buckets/{bucket_id}/collections/{collection_id}/records',
    tags=['data_access', 'bucket_operations'],
)
def get_records(
    field_limit: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_limit'
    ),
    field_sort: Optional[FieldSort] = Query(None, alias='_sort'),
    field_token: Optional[str] = Query(None, alias='_token'),
    field_since: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_since'
    ),
    field_to: Optional[conint(ge=0, le=9223372036854776000)] = Query(None, alias='_to'),
    field_before: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_before'
    ),
    id: Optional[str] = None,
    last_modified: Optional[conint(ge=0, le=9223372036854776000)] = None,
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
    bucket_id: str = ...,
    collection_id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/buckets/{bucket_id}/collections/{collection_id}/records/{id}',
    tags=['data_access', 'bucket_operations'],
)
def get_record(
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
    bucket_id: str = ...,
    collection_id: str = ...,
    id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/buckets/{bucket_id}/collections/{collection_id}/records/{id}/attachment',
    tags=['data_access', 'bucket_operations'],
)
def delete_attachment(bucket_id: str, collection_id: str = ..., id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/buckets/{bucket_id}/collections/{collection_id}/records/{id}/attachment',
    tags=['bucket_operations', 'data_access'],
)
def create_attachment(bucket_id: str, collection_id: str = ..., id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/buckets/{bucket_id}/collections/{id}', tags=['bucket_operations', 'data_access']
)
def get_collection(
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
    bucket_id: str = ...,
    id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/buckets/{bucket_id}/groups', tags=['data_access', 'bucket_operations'])
def get_groups(
    field_limit: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_limit'
    ),
    field_sort: Optional[FieldSort] = Query(None, alias='_sort'),
    field_token: Optional[str] = Query(None, alias='_token'),
    field_since: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_since'
    ),
    field_to: Optional[conint(ge=0, le=9223372036854776000)] = Query(None, alias='_to'),
    field_before: Optional[conint(ge=0, le=9223372036854776000)] = Query(
        None, alias='_before'
    ),
    id: Optional[str] = None,
    last_modified: Optional[conint(ge=0, le=9223372036854776000)] = None,
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
    bucket_id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/buckets/{bucket_id}/groups/{id}', tags=['bucket_operations', 'data_access'])
def get_group(
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
    bucket_id: str = ...,
    id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/buckets/{id}', tags=['data_access'])
def get_bucket(
    field_fields: Optional[FieldFields] = Query(None, alias='_fields'),
    if__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-Match'
    ),
    if__none__match: Optional[constr(pattern=r'^"([0-9]+?)"$|\*')] = Header(
        None, alias='If-None-Match'
    ),
    id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/contribute.json', tags=['system_health_checks'])
def contribute():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
